#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os, sys, shutil
import cPickle, time

# Hack for the dev environment
install_dir = os.path.abspath(os.path.join(os.path.dirname(__file__),'..'))
sys.path.append(install_dir)
import sc2reader

from pprint import PrettyPrinter
pprint = PrettyPrinter(indent=2).pprint

def main(args):
    data_file = os.path.join(install_dir,'data','autosave.dat')

    if args.reset:
        if os.path.exists(args.dest):
            shutil.rmtree(args.dest)
        if os.path.exists(data_file):
            os.remove(data_file)

    data = load_data(data_file)

    if not os.path.exists(args.dest):
        os.mkdir(args.dest)
    elif not os.path.isdir(args.dest):
        raise TypeError('The specified destination must be a directory')

    while True:
        print "SCANNING: {0}".format(args.source)
        for path in sc2reader.utils.get_files(args.source, depth=0):
            if os.path.getctime(path) > data['last_sync']:
                print "COPYING: {0}".format(path)
                shutil.copy(path, args.dest)

        write_data(data, data_file)
        time.sleep(args.period)

def load_data(data_file):
    if os.path.exists(data_file):
        with open(data_file) as file:
            return cPickle.load(file)
    else:
        return dict(last_sync=0)

def write_data(data, data_file):
    data['last_sync'] = time.time()
    with open(data_file,'w') as file:
        cPickle.dump(data, file)

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='Automatically copy new replays to directory')
    parser.add_argument('--reset', dest='reset', action='store_true', default=False, help='Removes destination directory and starts over [TESTING]')
    parser.add_argument('--source', dest='source', required=True, type=str, help='The source directory to poll')
    parser.add_argument('--dest', dest='dest', required=True, type=str, help='The destination directory to copy to')
    parser.add_argument('--period', dest='period', type=int, default=5, help='The period of time to wait between scans')
    parser.add_argument('--log', dest='log', type=str, default=sys.stdout, help='Destination file for log information')
    args = parser.parse_args()

    main(args)